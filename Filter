#include "helpers.h"
#include <math.h>
#include <stdlib.h>

// Convert image to grayscale
void grayscale(int height, int width, RGBTRIPLE image[height][width])
{
    float average;
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            average = (image[i][j].rgbtBlue + image[i][j].rgbtRed + image[i][j].rgbtGreen) / 3.0;
            image[i][j].rgbtBlue = round(average);
            image[i][j].rgbtRed = round(average);
            image[i][j].rgbtGreen = round(average);
        }
    }
    return;
}

// Convert image to sepia
void sepia(int height, int width, RGBTRIPLE image[height][width])
{
    float Red;
    float Green;
    float Blue;
    for ( int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            Red = 0.393 * image[i][j].rgbtRed + 0.769 * image[i][j].rgbtGreen + 0.189 * image[i][j].rgbtBlue;
            Green = 0.349 * image[i][j].rgbtRed + 0.686 * image[i][j].rgbtGreen + 0.168 * image[i][j].rgbtBlue;
            Blue = 0.272 * image[i][j].rgbtRed + 0.534 * image[i][j].rgbtGreen + 0.131 * image[i][j].rgbtBlue;
            if (Red<255)
            {
                image[i][j].rgbtRed = round(Red);
            }
            else
            {
                image[i][j].rgbtRed = 255;
            }
             if (Green<255)
            {
                image[i][j].rgbtGreen = round(Green);
            }
            else
            {
                image[i][j].rgbtGreen = 255;
            }
             if (Blue<255)
            {
                image[i][j].rgbtBlue = round(Blue);
            }
            else
            {
                image[i][j].rgbtBlue = 255;
            }
        }
    }
    return;
}

// Reflect image horizontally
void reflect(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        RGBTRIPLE *tmp = malloc(sizeof(RGBTRIPLE));
        for (int j = 0; j < (width / 2) ; j++)
        {
            *tmp = image[i][j];
            image[i][j] = image[i][(width-1-j)];
            image[i][(width-1-j)] = *tmp;

        }
    }
    return;
}

// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    float Red;
    float Green;
    float Blue;
    RGBTRIPLE(*temp)[width] = calloc(height, width * sizeof(RGBTRIPLE));
    
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            temp[i][j].rgbtRed = image[i][j].rgbtRed;
            temp[i][j].rgbtGreen = image[i][j].rgbtGreen;
            temp[i][j].rgbtBlue = image[i][j].rgbtBlue;
        }
    }
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            if (i != 0 && j != 0 && i != height - 1 && j != width - 1) //regular case
            {
                image[i][j].rgbtRed = (round((temp[i - 1][j - 1].rgbtRed + temp[i - 1][j].rgbtRed + temp[i - 1][j + 1].rgbtRed + 
                temp[i][j - 1].rgbtRed + temp[i][j].rgbtRed + temp[i][j + 1].rgbtRed + temp[i + 1][j - 1].rgbtRed + temp[i + 1][j].rgbtRed 
                + temp[i + 1][j + 1].rgbtRed) / 9.0));
                image[i][j].rgbtGreen = (round((temp[i - 1][j - 1].rgbtGreen + temp[i - 1][j].rgbtGreen + temp[i - 1][j + 1].rgbtGreen +
                temp[i][j - 1].rgbtGreen + temp[i][j].rgbtGreen + temp[i][j + 1].rgbtGreen + temp[i + 1][j - 1].rgbtGreen + 
                temp[i + 1][j].rgbtGreen + temp[i + 1][j + 1].rgbtGreen) / 9.0));
                image[i][j].rgbtBlue = (round((temp[i - 1][j - 1].rgbtBlue + temp[i - 1][j].rgbtBlue + temp[i - 1][j + 1].rgbtBlue +
                temp[i][j - 1].rgbtBlue + temp[i][j].rgbtBlue + temp[i][j + 1].rgbtBlue + temp[i + 1][j - 1].rgbtBlue +
                temp[i + 1][j].rgbtBlue + temp[i + 1][j + 1].rgbtBlue) / 9.0));
            }
            else if (i == 0 && j != 0 && j != width - 1) //top without corner
            {
                image[i][j].rgbtRed = (round((temp[i][j - 1].rgbtRed + temp[i][j].rgbtRed + temp[i][j + 1].rgbtRed + temp[i + 1][j - 1].rgbtRed +
                temp[i + 1][j].rgbtRed + temp[i + 1][j + 1].rgbtRed) / 6.0));
                image[i][j].rgbtGreen = (round((temp[i][j - 1].rgbtGreen + temp[i][j].rgbtGreen + temp[i][j + 1].rgbtGreen + 
                temp[i + 1][j - 1].rgbtGreen + temp[i + 1][j].rgbtGreen + temp[i + 1][j + 1].rgbtGreen) / 6.0));
                image[i][j].rgbtBlue = (round((temp[i][j - 1].rgbtBlue + temp[i][j].rgbtBlue + temp[i][j + 1].rgbtBlue +
                temp[i + 1][j - 1].rgbtBlue + temp[i + 1][j].rgbtBlue + temp[i + 1][j + 1].rgbtBlue) / 6.0));
            }
            else if (i != 0 && j == 0 && i != height - 1) // left edge without corners
            {
                image[i][j].rgbtRed = (round((temp[i - 1][j].rgbtRed + temp[i - 1][j + 1].rgbtRed + temp[i][j].rgbtRed + 
                temp[i][j + 1].rgbtRed + temp[i + 1][j].rgbtRed + temp[i + 1][j + 1].rgbtRed) / 6.0));
                image[i][j].rgbtGreen = (round((temp[i - 1][j].rgbtGreen + temp[i - 1][j + 1].rgbtGreen + temp[i][j].rgbtGreen + 
                temp[i][j + 1].rgbtGreen + temp[i + 1][j].rgbtGreen + temp[i + 1][j + 1].rgbtGreen) / 6.0));
                image[i][j].rgbtBlue = (round((temp[i - 1][j].rgbtBlue + temp[i - 1][j + 1].rgbtBlue + temp[i][j].rgbtBlue + 
                temp[i][j + 1].rgbtBlue + temp[i + 1][j].rgbtBlue + temp[i + 1][j + 1].rgbtBlue) / 6.0));
            }
            else if (i == 0 && j == 0) //top left corner
            {
                image[i][j].rgbtRed = (round((temp[i][j].rgbtRed + temp[i][j + 1].rgbtRed + temp[i + 1][j].rgbtRed + temp[i + 1][j + 1].rgbtRed) / 4.0));
                image[i][j].rgbtGreen = (round((temp[i][j].rgbtGreen + temp[i][j + 1].rgbtGreen + temp[i + 1][j].rgbtGreen + temp[i + 1][j + 1].rgbtGreen) / 4.0));
                image[i][j].rgbtBlue = (round((temp[i][j].rgbtBlue + temp[i][j + 1].rgbtBlue + temp[i + 1][j].rgbtBlue + temp[i + 1][j + 1].rgbtBlue) / 4.0));
            }
            else if (i == 0 && j == width - 1) //top right corner
            {
                image[i][j].rgbtRed = (round((temp[i][j - 1].rgbtRed + temp[i][j].rgbtRed + temp[i + 1][j - 1].rgbtRed + temp[i + 1][j].rgbtRed) / 4.0));
                image[i][j].rgbtGreen = (round((temp[i][j - 1].rgbtGreen + temp[i][j].rgbtGreen + temp[i + 1][j - 1].rgbtGreen + temp[i + 1][j].rgbtGreen) / 4.0));
                image[i][j].rgbtBlue = (round((temp[i][j - 1].rgbtBlue + temp[i][j].rgbtBlue + temp[i + 1][j - 1].rgbtBlue+ temp[i + 1][j].rgbtBlue) / 4.0));
            }
            else if (i != 0 && j == width - 1 && i != height - 1) //right edge without corners
            {
                image[i][j].rgbtRed = (round((temp[i - 1][j - 1].rgbtRed + temp[i - 1][j].rgbtRed + temp[i][j - 1].rgbtRed + temp[i][j].rgbtRed + 
                temp[i + 1][j - 1].rgbtRed + temp[i + 1][j].rgbtRed) / 6.0));
                image[i][j].rgbtGreen = (round((temp[i - 1][j - 1].rgbtGreen + temp[i - 1][j].rgbtGreen + temp[i][j - 1].rgbtGreen + temp[i][j].rgbtGreen + 
                temp[i + 1][j - 1].rgbtGreen + temp[i + 1][j].rgbtGreen) / 6.0));
                image[i][j].rgbtBlue = (round((temp[i - 1][j - 1].rgbtBlue + temp[i - 1][j].rgbtBlue + temp[i][j - 1].rgbtBlue + temp[i][j].rgbtBlue + 
                temp[i + 1][j - 1].rgbtBlue + temp[i + 1][j].rgbtBlue) / 6.0));
            }
            else if (i == height - 1 && j == width - 1) //bottom right corner
            {
                image[i][j].rgbtRed = (round((temp[i][j - 1].rgbtRed + temp[i][j].rgbtRed + temp[i - 1][j - 1].rgbtRed + temp[i - 1][j].rgbtRed) / 4.0));
                image[i][j].rgbtGreen = (round((temp[i][j - 1].rgbtGreen + temp[i][j].rgbtGreen + temp[i - 1][j - 1].rgbtGreen + temp[i - 1][j].rgbtGreen) / 4.0));
                image[i][j].rgbtBlue = (round((temp[i][j - 1].rgbtBlue + temp[i][j].rgbtBlue + temp[i - 1][j - 1].rgbtBlue+ temp[i - 1][j].rgbtBlue) / 4.0));
            }
            else if (i == height - 1 && j == 0) //bottom left corner
            {
                image[i][j].rgbtRed = (round((temp[i][j].rgbtRed + temp[i][j + 1].rgbtRed + temp[i - 1][j].rgbtRed + temp[i - 1][j + 1].rgbtRed) / 4.0));
                image[i][j].rgbtGreen = (round((temp[i][j].rgbtGreen + temp[i][j + 1].rgbtGreen + temp[i - 1][j].rgbtGreen + temp[i - 1][j + 1].rgbtGreen) / 4.0));
                image[i][j].rgbtBlue = (round((temp[i][j].rgbtBlue + temp[i][j + 1].rgbtBlue + temp[i - 1][j].rgbtBlue+ temp[i - 1][j + 1].rgbtBlue) / 4.0));
            }
            else if (i == height - 1 && j != 0 && j != width - 1) //bottom edge without corners
            {
                image[i][j].rgbtRed = (round((temp[i - 1][j - 1].rgbtRed + temp[i - 1][j].rgbtRed + temp[i - 1][j + 1].rgbtRed + 
                temp[i][j - 1].rgbtRed + temp[i][j].rgbtRed + temp[i][j + 1].rgbtRed) / 6.0));
                image[i][j].rgbtGreen = (round((temp[i - 1][j - 1].rgbtGreen + temp[i - 1][j].rgbtGreen + temp[i - 1][j + 1].rgbtGreen +
                temp[i][j - 1].rgbtGreen + temp[i][j].rgbtGreen + temp[i][j + 1].rgbtGreen) / 6.0));
                image[i][j].rgbtBlue = (round((temp[i - 1][j - 1].rgbtBlue + temp[i - 1][j].rgbtBlue + temp[i - 1][j + 1].rgbtBlue + 
                temp[i][j - 1].rgbtBlue + temp[i][j].rgbtBlue + temp[i][j + 1].rgbtBlue) / 6.0));
            }
        }
    }

    return;
}
